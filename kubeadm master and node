#####You can clone the repository for reference.

git clone https://github.com/techiescamp/kubeadm-scripts
#####Step #1:IPtables to see bridged traffic
#####Execute the following commands on all the nodes for IPtables to see bridged traffic.

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter
###### sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
###### Apply sysctl params without reboot
sudo sysctl --system
#####Step #2:Disable swap on all the Nodes
#####For kubeadm to work properly, you need to disable swap on all the nodes using the following command.

sudo swapoff -a
(crontab -l 2>/dev/null; echo "@reboot /sbin/swapoff -a") | crontab - || true
#####Step #3:Install CRI-O Runtime On All The Nodes
#####Create the .conf file to load the modules at bootup

cat <<EOF | sudo tee /etc/modules-load.d/crio.conf
overlay
br_netfilter
EOF
###### Set up required sysctl params, these persist across reboots.
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
#####Execute the following commands to enable overlayFS & VxLan pod communication.

sudo modprobe overlay
sudo modprobe br_netfilter
#####Set up required sysctl params, these persist across reboots.

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
#####Reload the parameters.

sudo sysctl --system
#####Create Kubernetes cluster using Kubeadm on Ubuntu 22.04 LTS
#####Step #4:Install Kubeadm & Kubelet & Kubectl on all Nodes
#####Install the required dependencies

#####Update your system packages:

sudo apt-get update
Install apt-transport-https curl

sudo apt-get install -y apt-transport-https curl
Add gpg keys

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo tee /etc/apt/sources.list.d/kubernetes.list
#####Add this below lines in this file

deb https://apt.kubernetes.io/ kubernetes-xenial main
#####Lets install kubelet kubeadm kubectl

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
#####Run the ./common.sh file (kubeadm-scripts/scripts) in this location on both nodes:

./common.sh
#####Now you need to change master.sh file

sudo nano master.sh  ## you can run directly--- kubeadm init
##### PUBLIC_IP_ACCESS="false"

##### False replace with true

##### PUBLIC_IP_ACCESS="true"
##### Now run the master.sh file

./master.sh
##### Use the following commands from the output to create the kubeconfig in master so that you can use kubectl to interact with cluster API

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
#####Now, verify the kubeconfig by executing the following kubectl command to list all the pods in the kube-system namespace.

kubectl get po -n kube-system
#####Run the following command:

kubectl get nodes

#####if you get any error you can reset kubeadm
########################################
using ----->kubeadm reset
###############
#############################################################################################################################

##################################################################################################################################
After installtion of cluster

error:------

NAME     STATUS     ROLES           AGE   VERSION
master   NotReady   control-plane   10m   v1.28.2
#########################################
solution:--

kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

